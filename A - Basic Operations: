#include <iostream>
#include <cmath>
#include <complex>
#include <vector>
#include <algorithm>
#include <cmath>     
#include <map>  
#include <stdexcept>
#include <bitset>
#include <string>

using namespace std;


// Functions for Basic Operations (Part A)

void takeInput(double& num1, double& num2) {
    cout << "Enter first number: ";
    cin >> num1;
    cout << "Enter second number: ";
    cin >> num2;
}

double add(double a, double b) {
    return a+b;
}

double subtract(double a, double b) {
    return a-b;
}

double multiply(double a, double b) {
    return a*b;
}

double divide(double a, double b) {
    if (b==0) {
        cout << "Error! Division by Zero."<< endl; 
        return 0; 
    }
    return a/b;
}

double toRadians(double degree) {
    return degree * (M_PI / 180.0);
}

double sine(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return sin(angle);
}

double cosine(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return cos(angle);
}

double tangent(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return tan(angle);
}

double arcsine(double value) {
    // arcsin returns in radians
    return asin(value);
}

double arccosine(double value) {
    // arccos returns in radians
    return acos(value);
}

double arctangent(double value) {
    // arctan returns in radians
    return atan(value);
}

// Functions for Algebraic Operations

long long factorial(int n) {
    long long result = 1;
    for (int i = 2; i <= n; ++i) {
        result *= i;
    }
    return result;
}

double nthRoot(double value, double n) {
    return pow(value, 1.0 / n);
}


// Functions for Logarithmic Operations
double logBase10(double value) {
    return log10(value);
}

double logBaseE(double value) {
    return log(value);
}

double logCustomBase(double value, double base) {
    if (base <= 0 || base == 1 || value <= 0) {
        cout << "Error: Invalid base or value for logarithm." << endl;
        return 0;
    }
    return log(value) / log(base);
}

// Functions for Statistical Operations

double mean(const vector<double>& nums) {
    double sum = 0;
    for (double num : nums) {
        sum += num;
    }
    return sum / nums.size();
}

double median(vector<double> nums) {
    sort(nums.begin(), nums.end());
    size_t size = nums.size();
    if (size % 2 == 0) {
        return (nums[size / 2 - 1] + nums[size / 2]) / 2;
    } else {
        return nums[size / 2];
    }
}

double mode(const vector<double>& nums) {
    map<double, int> frequency;
    for (double num : nums) {
        frequency[num]++;
    }

    double mode = nums[0];
    int maxCount = 0;
    for (auto& elem : frequency) {
        if (elem.second > maxCount) {
            maxCount = elem.second;
            mode = elem.first;
        }
    }
    return mode;
}

double variance(const vector<double>& nums) {
    double meanValue = mean(nums);
    double sum = 0;
    for (double num : nums) {
        sum += pow(num - meanValue, 2);
    }
    return sum / nums.size();
}

double standardDeviation(const vector<double>& nums) {
    return sqrt(variance(nums));
}

// Function to read multiple values into a vector
vector<double> readVector() {
    vector<double> nums;
    int count;
    double value;

    cout << "Enter the number of values: ";
    cin >> count;
    cout << "Enter " << count << " numbers:" << endl;
    for (int i = 0; i < count; ++i) {
        cin >> value;
        nums.push_back(value);
    }
    return nums;
}

// Addtional Functions (Part F) 

int modOperation(int a, int b) {
    return a % b;
}

double percentage(double value, double total) {
    return (value / total) * 100;
}

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int lcm(int a, int b) {
    return (a / gcd(a, b)) * b;
}

// Function for Complex Number Operations 

void printComplex(const complex<double>& c) {
    cout << c.real();
    if (c.imag() >= 0) cout << "+";
    cout << c.imag() << "i" << endl;
}

// Functions for Matrix Operations (Part H) 

typedef vector<vector<double>> Matrix;

Matrix readMatrix() {
    int rows, cols;
    cout << "Enter the number of rows and columns: ";
    cin >> rows >> cols;

    Matrix mat(rows, vector<double>(cols));
    cout << "Enter matrix elements row by row:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> mat[i][j];
        }
    }
    return mat;
}

void printMatrix(const Matrix& mat) {
    for (const auto& row : mat) {
        for (double elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
}

Matrix addMatrices(const Matrix& a, const Matrix& b) {
    if (a.size() != b.size() || a[0].size() != b[0].size()) {
        throw invalid_argument("Matrices dimensions do not match for addition.");
    }

    Matrix result(a.size(), vector<double>(a[0].size()));
    for (size_t i = 0; i < a.size(); ++i) {
        for (size_t j = 0; j < a[i].size(); ++j) {
            result[i][j] = a[i][j] + b[i][j];
        }
    }
    return result;
}

Matrix subtractMatrices(const Matrix& a, const Matrix& b) {
    if (a.size() != b.size() || a[0].size() != b[0].size()) {
        throw invalid_argument("Matrices dimensions do not match for subtraction.");
    }

    Matrix result(a.size(), vector<double>(a[0].size()));
    for (size_t i = 0; i < a.size(); ++i) {
        for (size_t j = 0; j < a[i].size(); ++j) {
            result[i][j] = a[i][j] - b[i][j];
        }
    }
    return result;
}

Matrix multiplyMatrices(const Matrix& a, const Matrix& b) {
    if (a[0].size() != b.size()) {
        throw invalid_argument("Matrices dimensions do not match for multiplication.");
    }

    Matrix result(a.size(), vector<double>(b[0].size(), 0));
    for (size_t i = 0; i < result.size(); ++i) {
        for (size_t j = 0; j < result[i].size(); ++j) {
            for (size_t k = 0; k < a[0].size(); ++k) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    return result;
}

Matrix transposeMatrix(const Matrix& mat) {
    Matrix result(mat[0].size(), vector<double>(mat.size()));
    for (size_t i = 0; i < mat.size(); ++i) {
        for (size_t j = 0; j < mat[i].size(); ++j) {
            result[j][i] = mat[i][j];
        }
    }
    return result;
}

double determinant(const Matrix& mat) {
    if (mat.size() != mat[0].size()) {
        throw invalid_argument("Determinant can only be calculated for square matrices.");
    }

    if (mat.size() == 2) {
        // Determinant for 2x2 matrix
        return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
    } else {
        // Add implementation for larger matrices if needed
        throw invalid_argument("Currently, only 2x2 matrices are supported.");
    }
}

Matrix invertMatrix(const Matrix& mat) {
    if (mat.size() != 2 || mat[0].size() != 2) {
        throw invalid_argument("Currently, only inversion of 2x2 matrices is supported.");
    }

    double det = determinant(mat);
    if (det == 0) {
        throw invalid_argument("Matrix is not invertible (determinant is zero).");
    }

    Matrix result(2, vector<double>(2));
    result[0][0] = mat[1][1] / det;
    result[0][1] = -mat[0][1] / det;
    result[1][0] = -mat[1][0] / det;
    result[1][1] = mat[0][0] / det;

    return result;
}


//Functions for Binary Operations (Part I) 

int binaryToInt(const string& binary) {
    return stoi(binary, 0, 2);
}

string intToBinary(int number) {
    return bitset<32>(number).to_string(); // Assuming we work with 32-bit integers
}

string binaryAddition(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA + numB);
}

string binarySubtraction(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA - numB);
}

string binaryMultiplication(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA * numB);
}

string binaryDivision(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    if (numB == 0) {
        throw invalid_argument("Division by zero is not allowed.");
    }
    return intToBinary(numA / numB);
}

string binaryAND(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA & numB);
}

string binaryOR(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA | numB);
}

string binaryXOR(const string& a, const string& b) {
    int numA = binaryToInt(a);
    int numB = binaryToInt(b);
    return intToBinary(numA ^ numB);
}

// Functions for Engineering Operations ( Part J )

double convertLength(double value, string fromUnit, string toUnit) {
    // Example: Convert between meters and feet
    if (fromUnit == "m" && toUnit == "ft") {
        return value * 3.28084; // meters to feet
    } else if (fromUnit == "ft" && toUnit == "m") {
        return value / 3.28084; // feet to meters
    }
    // Add more unit conversions as needed
    return value;
}

double convertMass(double value, string fromUnit, string toUnit) {
    // Example: Convert between kilograms and pounds
    if (fromUnit == "kg" && toUnit == "lb") {
        return value * 2.20462; // kilograms to pounds
    } else if (fromUnit == "lb" && toUnit == "kg") {
        return value / 2.20462; // pounds to kilograms
    }
    // Add more unit conversions as needed
    return value;
}

double convertTemperature(double value, string fromUnit, string toUnit) {
    // Convert between Celsius and Fahrenheit
    if (fromUnit == "C" && toUnit == "F") {
        return value * 9 / 5 + 32; // Celsius to Fahrenheit
    } else if (fromUnit == "F" && toUnit == "C") {
        return (value - 32) * 5 / 9; // Fahrenheit to Celsius
    }
    // Add more temperature conversions as needed
    return value;
}

// Coordinate conversions

pair<double, double> polarToRectangular(double radius, double angleInDegrees) {
    double angleInRadians = angleInDegrees * M_PI / 180.0;
    double x = radius * cos(angleInRadians);
    double y = radius * sin(angleInRadians);
    return make_pair(x, y);
}

pair<double, double> rectangularToPolar(double x, double y) {
    double radius = sqrt(x * x + y * y);
    double angleInDegrees = atan2(y, x) * 180.0 / M_PI;
    return make_pair(radius, angleInDegrees);
}


int main()
{
  int operation; 
 
  double num1, num2; 
  double angleValue;
  
  cout << "Select The Operation by Entering their Number"<< endl; 
  cout << "1. Add \n2. Subtract \n3. Multiply \n4. Divide\n"; 
  cout << "5. Sine\n6. Cosine\n7. Tangent\n";
  cout << "8. Arcsine\n9. Arccosine\n10. Arctangent\n";
  cout << "11. Exponentiation\n12. Square root\n13. Cube root\n";
  cout << "14. Nth root\n15. Factorial\n16. Absolute value\n";
  cout << "17. Logarithm (base 10)\n18. Natural logarithm (base e)\n";
  cout << "19. Custom base logarithm\n";
  cout << "20. Mean\n21. Median\n22. Mode\n";
  cout << "23. Standard Deviation\n24. Variance\n";
  cout << "25. Modulus\n26. Percentage\n27. GCD\n";
  cout << "28. LCM\n29. Floor\n30. Ceiling\n";
  cout << "31. Add Complex Numbers\n32. Subtract Complex Numbers\n";
  cout << "33. Multiply Complex Numbers\n34. Divide Complex Numbers\n";
  cout << "35. Conjugate of a Complex Number\n";
  cout << "36. Add Matrices\n37. Subtract Matrices\n38. Multiply Matrices\n";
  cout << "39. Transpose Matrix\n40. Determinant of Matrix\n41. Inverse of Matrix\n";
  cout << "42. Binary Addition\n43. Binary Subtraction\n44. Binary Multiplication\n";
  cout << "45. Binary Division\n46. Binary AND\n47. Binary OR\n48. Binary XOR\n";
  cout << "49. Unit Conversion\n50. Coordinate Conversion\n";  


  cin>> operation; 

   vector<double> numbers;
   int num3;
   complex<double> complex1, complex2, result;
   Matrix matrix1, matrix2, resultMatrix;
   string binary1, binary2;

  switch (operation) {
      
      case 1:
      takeInput(num1, num2);
      cout <<" Result: "<< add(num1, num2)<<endl; 
      break;
      
      case 2:
     takeInput(num1, num2);
      cout <<" Result: "<<  subtract(num1, num2)<<endl; 
      break;
      
      case 3:
      takeInput(num1, num2);
      cout <<" Result: "<<  multiply(num1, num2)<<endl; 
      break;
      
      case 4:
      takeInput(num1, num2);
      cout <<" Result: "<<  divide(num1, num2)<<endl;
      break; 
      
      case 5:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Sine: " << sine(angleValue) << endl;
            break;
        case 6:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Cosine: " << cosine(angleValue) << endl;
            break;
        case 7:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Tangent: " << tangent(angleValue) << endl;
            break;
        case 8:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arcsine: " << arcsine(angleValue) << " radians" << endl;
            break;
        case 9:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arccosine: " << arccosine(angleValue) << " radians" << endl;
            break;
        case 10:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arctangent: " << arctangent(angleValue) << " radians" << endl;
            break;

        case 11:
            cout << "Enter base and exponent: ";
            cin >> num1 >> num2;
            cout << "Result: " << pow(num1, num2) << endl;
            break;
        case 12:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Square Root: " << sqrt(num1) << endl;
            break;
        case 13:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Cube Root: " << cbrt(num1) << endl;
            break;
        case 14:
            cout << "Enter number and root: ";
            cin >> num1 >> num2;
            cout << "Nth Root: " << nthRoot(num1, num2) << endl;
            break;
        case 15:
            int n;
            cout << "Enter a non-negative integer: ";
            cin >> n;
            if (n >= 0) {
                cout << "Factorial: " << factorial(n) << endl;
            } else {
                cout << "Error: Negative number for factorial." << endl;
            }
            break;
        case 16:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Absolute Value: " << abs(num1) << endl;
            break;

        case 17:
            cout << "Enter number: ";
            cin >> num1;
            if (num1 > 0) {
                cout << "Logarithm (base 10): " << logBase10(num1) << endl;
            } else {
                cout << "Error: Logarithm for non-positive number." << endl;
            }
            break;
        case 18:
            cout << "Enter number: ";
            cin >> num1;
            if (num1 > 0) {
                cout << "Natural logarithm (base e): " << logBaseE(num1) << endl;
            } else {
                cout << "Error: Logarithm for non-positive number." << endl;
            }
            break;
        case 19:
            double base;
            cout << "Enter number and base: ";
            cin >> num1 >> base;
            cout << "Custom base logarithm: " << logCustomBase(num1, base) << endl;
            break;

        case 20:
            numbers = readVector();
            cout << "Mean: " << mean(numbers) << endl;
            break;
        case 21:
            numbers = readVector();
            cout << "Median: " << median(numbers) << endl;
            break;
        case 22:
            numbers = readVector();
            cout << "Mode: " << mode(numbers) << endl;
            break;
        case 23:
            numbers = readVector();
            cout << "Standard Deviation: " << standardDeviation(numbers) << endl;
            break;
        case 24:
            numbers = readVector();
            cout << "Variance: " << variance(numbers) << endl;
            break;

        case 25:
            cout << "Enter two integers: ";
            cin >> num1 >> num3;
            cout << "Modulus: " << modOperation(num1, num3) << endl;
            break;
        case 26:
            cout << "Enter value and total: ";
            cin >> num1 >> num2;
            cout << "Percentage: " << percentage(num1, num2) << " %" << endl;
            break;
        case 27:
            cout << "Enter two integers: ";
            cin >> num1 >> num3;
            cout << "GCD: " << gcd(num1, num3) << endl;
            break;
        case 28:
            cout << "Enter two integers: ";
            cin >> num1 >> num3;
            cout << "LCM: " << lcm(num1, num3) << endl;
            break;
        case 29:
            cout << "Enter a decimal number: ";
            cin >> num1;
            cout << "Floor: " << floor(num1) << endl;
            break;
        case 30:
            cout << "Enter a decimal number: ";
            cin >> num1;
            cout << "Ceiling: " << ceil(num1) << endl;
            break;

        case 31:
            cout << "Enter real and imaginary parts of first complex number: ";
            cin >> complex1;
            cout << "Enter real and imaginary parts of second complex number: ";
            cin >> complex2;
            result = complex1 + complex2;
            printComplex(result);
            break;
        case 32:
            cout << "Enter real and imaginary parts of first complex number: ";
            cin >> complex1;
            cout << "Enter real and imaginary parts of second complex number: ";
            cin >> complex2;
            result = complex1 - complex2;
            printComplex(result);
            break;
        case 33:
            cout << "Enter real and imaginary parts of first complex number: ";
            cin >> complex1;
            cout << "Enter real and imaginary parts of second complex number: ";
            cin >> complex2;
            result = complex1 * complex2;
            printComplex(result);
            break;
        case 34:
            cout << "Enter real and imaginary parts of first complex number: ";
            cin >> complex1;
            cout << "Enter real and imaginary parts of second complex number: ";
            cin >> complex2;
            result = complex1 / complex2;
            printComplex(result);
            break;
        case 35:
            cout << "Enter real and imaginary parts of a complex number: ";
            cin >> complex1;
            result = conj(complex1);
            printComplex(result);
            break;

        case 36: // Add Matrices
            matrix1 = readMatrix();
            matrix2 = readMatrix();
            try {
                resultMatrix = addMatrices(matrix1, matrix2);
                printMatrix(resultMatrix);
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;

        case 37: // Subtract Matrices
            matrix1 = readMatrix();
            matrix2 = readMatrix();
            try {
                resultMatrix = subtractMatrices(matrix1, matrix2);
                printMatrix(resultMatrix);
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;

        case 38: // Multiply Matrices
            matrix1 = readMatrix();
            matrix2 = readMatrix();
            try {
                resultMatrix = multiplyMatrices(matrix1, matrix2);
                printMatrix(resultMatrix);
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;

        case 39: // Transpose Matrix
            matrix1 = readMatrix();
            resultMatrix = transposeMatrix(matrix1);
            printMatrix(resultMatrix);
            break;

        case 40: // Determinant of Matrix
            matrix1 = readMatrix();
            try {
                double det = determinant(matrix1);
                cout << "Determinant: " << det << endl;
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;

        case 41: // Inverse of Matrix
            matrix1 = readMatrix();
            try {
                resultMatrix = invertMatrix(matrix1);
                printMatrix(resultMatrix);
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;

        case 42:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binaryAddition(binary1, binary2) << endl;
            break;
        case 43:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binarySubtraction(binary1, binary2) << endl;
            break;
        case 44:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binaryMultiplication(binary1, binary2) << endl;
            break;
        case 45:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            try {
                cout << "Result: " << binaryDivision(binary1, binary2) << endl;
            } catch (const invalid_argument& e) {
                cout << e.what() << endl;
            }
            break;
        case 46:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binaryAND(binary1, binary2) << endl;
            break;
        case 47:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binaryOR(binary1, binary2) << endl;
            break;
        case 48:
            cout << "Enter two binary numbers: ";
            cin >> binary1 >> binary2;
            cout << "Result: " << binaryXOR(binary1, binary2) << endl;
            break;

        case 49: { // Unit Conversion
            double value;
            string fromUnit, toUnit;
            cout << "Enter value, from unit, to unit (e.g., 10 kg lb): ";
            cin >> value >> fromUnit >> toUnit;
            // Add logic to choose between length, mass, and temperature
            cout << "Converted value: " << convertLength(value, fromUnit, toUnit) << endl; // Example usage
            break;
        }

        case 50: { // Coordinate Conversion
            double num1, num2;
            cout << "Enter radius and angle (for polar to rectangular), or x and y (for rectangular to polar): ";
            cin >> num1 >> num2;
            pair<double, double> result;
            // Add logic to choose between polarToRectangular and rectangularToPolar
            result = polarToRectangular(num1, num2); // Example usage
            cout << "Converted coordinates: (" << result.first << ", " << result.second << ")" << endl;
            break;
        }

      
      default:
      cout << "Invalid Operator!"<< endl; 
  }
  
  return 0; 
}
