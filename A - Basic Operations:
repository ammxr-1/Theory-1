
#include <iostream>
#include <cmath>

using namespace std;


// Functions for Basic Operations (Part A)

void takeInput(double& num1, double& num2) {
    cout << "Enter first number: ";
    cin >> num1;
    cout << "Enter second number: ";
    cin >> num2;
}

double add(double a, double b) {
    return a+b;
}

double subtract(double a, double b) {
    return a-b;
}

double multiply(double a, double b) {
    return a*b;
}

double divide(double a, double b) {
    if (b==0) {
        cout << "Error! Division by Zero."<< endl; 
        return 0; 
    }
    return a/b;
}

double toRadians(double degree) {
    return degree * (M_PI / 180.0);
}

double sine(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return sin(angle);
}

double cosine(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return cos(angle);
}

double tangent(double angle, bool isDegree = true) {
    if (isDegree) {
        angle = toRadians(angle);
    }
    return tan(angle);
}

double arcsine(double value) {
    // arcsin returns in radians
    return asin(value);
}

double arccosine(double value) {
    // arccos returns in radians
    return acos(value);
}

double arctangent(double value) {
    // arctan returns in radians
    return atan(value);
}

// Functions for Algebraic Operations

long long factorial(int n) {
    long long result = 1;
    for (int i = 2; i <= n; ++i) {
        result *= i;
    }
    return result;
}

double nthRoot(double value, double n) {
    return pow(value, 1.0 / n);
}


// Functions for Logarithmic Operations
double logBase10(double value) {
    return log10(value);
}

double logBaseE(double value) {
    return log(value);
}

double logCustomBase(double value, double base) {
    if (base <= 0 || base == 1 || value <= 0) {
        cout << "Error: Invalid base or value for logarithm." << endl;
        return 0;
    }
    return log(value) / log(base);
}

int main()
{
  int operation; 
 
  double num1, num2; 
  double angleValue;
  
  cout << "Select The Operation by Entering their Number"<< endl; 
  cout << "1. Add \n2. Subtract \n3. Multiply \n4. Divide\n"; 
  cout << "5. Sine\n6. Cosine\n7. Tangent\n";
  cout << "8. Arcsine\n9. Arccosine\n10. Arctangent\n";
  cout << "11. Exponentiation\n12. Square root\n13. Cube root\n";
  cout << "14. Nth root\n15. Factorial\n16. Absolute value\n";
  cout << "17. Logarithm (base 10)\n18. Natural logarithm (base e)\n";
  cout << "19. Custom base logarithm\n";
  
  cin>> operation; 
  
  switch (operation) {
      
      case 1:
      takeInput(num1, num2);
      cout <<" Result: "<< add(num1, num2)<<endl; 
      break;
      
      case 2:
     takeInput(num1, num2);
      cout <<" Result: "<<  subtract(num1, num2)<<endl; 
      break;
      
      case 3:
      takeInput(num1, num2);
      cout <<" Result: "<<  multiply(num1, num2)<<endl; 
      break;
      
      case 4:
      takeInput(num1, num2);
      cout <<" Result: "<<  divide(num1, num2)<<endl;
      break; 
      
      case 5:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Sine: " << sine(angleValue) << endl;
            break;
        case 6:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Cosine: " << cosine(angleValue) << endl;
            break;
        case 7:
            cout << "Enter angle in degrees: ";
            cin >> angleValue;
            cout << "Tangent: " << tangent(angleValue) << endl;
            break;
        case 8:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arcsine: " << arcsine(angleValue) << " radians" << endl;
            break;
        case 9:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arccosine: " << arccosine(angleValue) << " radians" << endl;
            break;
        case 10:
            cout << "Enter value: ";
            cin >> angleValue;
            cout << "Arctangent: " << arctangent(angleValue) << " radians" << endl;
            break;

        case 11:
            cout << "Enter base and exponent: ";
            cin >> num1 >> num2;
            cout << "Result: " << pow(num1, num2) << endl;
            break;
        case 12:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Square Root: " << sqrt(num1) << endl;
            break;
        case 13:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Cube Root: " << cbrt(num1) << endl;
            break;
        case 14:
            cout << "Enter number and root: ";
            cin >> num1 >> num2;
            cout << "Nth Root: " << nthRoot(num1, num2) << endl;
            break;
        case 15:
            int n;
            cout << "Enter a non-negative integer: ";
            cin >> n;
            if (n >= 0) {
                cout << "Factorial: " << factorial(n) << endl;
            } else {
                cout << "Error: Negative number for factorial." << endl;
            }
            break;
        case 16:
            cout << "Enter number: ";
            cin >> num1;
            cout << "Absolute Value: " << abs(num1) << endl;
            break;

        case 17:
            cout << "Enter number: ";
            cin >> num1;
            if (num1 > 0) {
                cout << "Logarithm (base 10): " << logBase10(num1) << endl;
            } else {
                cout << "Error: Logarithm for non-positive number." << endl;
            }
            break;
        case 18:
            cout << "Enter number: ";
            cin >> num1;
            if (num1 > 0) {
                cout << "Natural logarithm (base e): " << logBaseE(num1) << endl;
            } else {
                cout << "Error: Logarithm for non-positive number." << endl;
            }
            break;
        case 19:
            double base;
            cout << "Enter number and base: ";
            cin >> num1 >> base;
            cout << "Custom base logarithm: " << logCustomBase(num1, base) << endl;
            break;
      
      default:
      cout << "Invalid Operator!"<< endl; 
  }
  
  return 0; 
}
